Step 1. Declare global variables `stack[5]` to hold the stack elements and `top` to keep track of the top element's index.

Step 2. Define a function `push`:
   - Check if `top` is 4 (stack is full):
     - If true, display "Stack overflow."
     - Otherwise, increment `top`.
     - Display "Enter digit: " and read an integer into `stack[top]`.
     - Display "Remaining entries left: ".
   
Step 3. Define a function `pop`:
   - Check if `top` is -1 (stack is empty):
     - If true, display "Stack underflow."
     - Otherwise:
     - Display the value that's popped from the stack.
     - Set the current top element to 0.
     - Decrement `top`.
     - Display "Remaining elements in stack: ".

Step 4. Define a function `peep`:
   - Check if `top` is -1 (stack is empty):
     - If true, display "Stack is empty."
     - Otherwise, display the value on top of the stack at index `top`.

Step 5. Define a function `change`:
   - Check if `top` is -1 (stack is empty):
     - If true, display "Stack is empty."
     - Otherwise:
     - Display "Enter new value for index top: ".
     - Read an integer into `stack[top]`.

Step 6. Define a function `display`:
   - Check if `top` is -1 (stack is empty):
     - If true, display "Stack is empty."
     - Otherwise:
     - Loop from 0 to `top` using variable `i`:
       - Display `stack[i]` followed by a space.
     - Display a newline character.

Step 7. Define a function `menu`:
   - Declare a local variable `choice`.
   - Label: `restart`
   - Display the menu options for push, pop, peep, change, display, and exit.
   - Read the user's choice into `choice`.
   - Use a `switch` statement to handle different cases:
     - For each case, call the corresponding function and go to label `restart` to show the menu again.
     - For the exit case, display "Exit." and break the loop.
     - For the default case, display "Wrong Choice" and go to label `restart`.

Step 8. Define the `main` function:
   - Initialize `top` to -1.
   - Call the `menu` function to display the menu and perform operations.
   - Pause program execution using `system("PAUSE")`.
   - Return 0 to indicate successful execution.
