Step 1. Declare global variables `arr[10]`, `choice`, and `top` as integers.

Step 2. Define the `input` function:
   - Display "Enter: ".
   - Loop 5 times using variable `i`:
     - Read an integer from input and store it in `arr[i]`.
     - Update `top` with the current value of `arr[i]`.

Step 3. Define the `menu` function:
        -Label: `restart`
        -Print the menu options for insert, search, delete, display, and exit.
        -Read the user's choice.
        -Use a `switch` statement to handle different cases:
        -Call the corresponding functions based on the user's choice.
        -In cases 1, 2, 3, and 4, go to label `restart` to show the menu again.
        -In case 5, print "Exit" and break.
        -For default case, print "Wrong Choice" and go to label `restart`.

Step 4. Define the `insert` function:
   - Declare a local variable `index` as an integer.
   - Check if `top` is equal to 10:
     - If true, display "Array Overflow" and return `top`.
   - Label: `re`
   - Display "Enter index value: ".
   - Read `index` from input.
   - Check if `index` is greater than `top`:
     - If true, display "Enter a value >= top" and go to label `re`.
   - Else Shift elements in the array to create space for the new element.
   - Display "Enter new value for index: ".
   - Read a new value from input and update `arr[index]`.
   - Increment `top` by 1.
   - Return updated `top`.

Step 5. Define the `search` function:
   - Declare local variables `x` and `n` as integers.
   - Display "Search : ".
   - Read `x` from input.
   - Loop from 0 to `top - 1` using variable `i`:
     - Check if `arr[i]` is equal to `x`:
       - If true, display "Found x at index i".
       - Increment `n` by 1.
   - If `n` is equal to 0:
     - Display "Unsuccessful Search".
   - Display a newline character.

Step 6. Define the `delete` function:
   - Declare local variables `s` and `del` as integers.
   - Check if `top` is equal to 0:
     - If true, display "Array Underflow" and return `top`.
     - Else
           - Label: `re`
           - Display "Delete value at index: ".
           - Read `s` from input.
           - Check if `top - 1` is less than `s`:
             - If true, display "Enter a value >= top-1" and go to label `re`.
           - Delete the element at index `s` and shift remaining elements.
           - Display "del is deleted.".
           - Decrement `top` by 1.
           - Return updated `top`.

Step 7. Define the `display` function:
   - Check if `top` is equal to 0:
     - If true, display "Array is empty.".
   - Otherwise, display elements in the array separated by spaces.

Step 8. Define the `main` function:
   - Call the `input` function to initialize the array and update `top`.
   - Call the `menu` function to display the menu and perform operations.
   - Pause program execution using `system("PAUSE")`.
   - Return 0 to indicate successful execution.
